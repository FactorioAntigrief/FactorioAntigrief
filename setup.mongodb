// Select the database to use.
use('fagc');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
db.rules.drop();
// db.offenses.drop();
// db.reports.drop();
// db.revocations.drop();
// db.logs.drop();

// add all the rules
db.rules.insertMany([
    {'shortdesc': 'Legacy', 'longdesc': `The origin of the offence could no longer be traced. All that is know is that the offender is assumed guilty`},
    {'shortdesc': 'No personal attacks', 'longdesc': `Making of an abusive remark on or relating to one's person instead of providing evidence when examining another person's claims or comments.`},
    {'shortdesc': 'No spam', 'longdesc': `Using your means of communicating in a way that blocks or makes difficult the communication between others in any way.`},
    {'shortdesc': 'No advertisments', 'longdesc': `Using any means of communication to adversite for any service or product.`},
    {'shortdesc': 'No harming players', 'longdesc': `Do not harm other players in any way, including but not limited to killing, walling in and pushing into a harmful area/situation`},
    {'shortdesc': 'No griefing', 'longdesc': `Disruption the game in any way that causes harm and/or additonal work for the other players. This includes, but is not limited to, sabotaged power, production lines, mass-bluepring`},
    {'shortdesc': 'Manual trains on automatic rail', 'longdesc': `Driving a train in 'manual mode' on an automatic rail.`},
    {'shortdesc': 'Follow orders by admins', 'longdesc': `Going against direct orders by admins`},
    {'shortdesc': `No change for change's sake`, 'longdesc': `Replacing one design with another that's only different or worse in performing the task`},
    {'shortdesc': `Don't build on the main-bus`, 'longdesc': `Any builds that are either on or 'touching' the main bus`},
    {'shortdesc': `Use only RHD trains`, 'longdesc': `When placing a two one-way rail-lines next to eachother, the signals should go on the 'outside' of the rails.`},
    {'shortdesc': `Use only LHD trains`, 'longdesc': `When placing a two one-way rail-lines next to eachother, the signals should go on the 'inside' of the rails.`},
    {'shortdesc': `Hacking / Abusing Bugs`, 'longdesc': `Hacking / cheating / abusing bugs will not be tolerated.`},
    {'shortdesc': `Role Asking`, 'longdesc': 'Do not ask for ranks. Our ranks are synchronized with Discord, make sure to join us there.'},
    {'shortdesc': `Hoovering`, 'longdesc': `Taking all items from a belt or logistics request is forbidden.`},
    {'shortdesc': `Item Spam (Different To 3)`, 'longdesc': `Spamming (in the form of bots, unlimited chests and paths) is not allowed.`},
    {'shortdesc': `Placing Paths With Bots`, 'longdesc': `Do not lay down/remove paths with bots.`},
    {'shortdesc': `Active Providers`, 'longdesc': `Do not use active provider chests without permission.`},
    {'shortdesc': `Global Speakers`, 'longdesc': `Do not use speakers on global or with alerts without permission.`},
    {'shortdesc': `Exploring Without Reason`, 'longdesc': `Do not walk in random directions for no reason (to save map size and server resources).`},
    {'shortdesc': `Stoping Production Without Warning`, 'longdesc': `Do not rotate belts, deactivate belts with wires, or cause production to stop. Do not remove/move major parts of the factory without permission. Do not remove stuff without asking your fellow players.`},
    {'shortdesc': `Roundabouts`, 'longdesc': `Do not make train roundabouts. RoRo stations are allowed.`},
    {'shortdesc': `Train Size`, 'longdesc': `When using trains, use the same size other players have used.`},
    {'shortdesc': `UPS/FPS`, 'longdesc': `Do not complain about lag, low fps and low ups etc.`},
    {'shortdesc': `Offensive structures`, 'longdesc': `Creating offensive structures like swastika, penis, or anything like this.`},
    {'shortdesc': `No adult (18+), explicit, or controversal messages.`, 'longdesc': `Do not talk in game about anything NSFW related.`},
    {'shortdesc': `No racist or degrading content`, 'longdesc': `Don't be racist in anyway in the chat.`}
]);


// // Run a find command to view items sold on April 4th, 2014.
// db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// // Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// // Run the aggregation and open a cursor to the results.
// // Use toArray() to exhaust the cursor to return the whole result set.
// // You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
